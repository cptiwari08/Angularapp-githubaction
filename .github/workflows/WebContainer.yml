name: Build & Deploy - Azure Web App (Container)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  LOCATION: "Central India"         # RG location
  PLAN_SKU: "P1v3"                  # App Service Plan SKU
  IMAGE_NAME: "webapp"              # ACR repo name (ACR_NAME.azurecr.io/webapp:<tag>)
  CONTAINER_PORT: ${{ secrets.WEBSITES_PORT || 8080 }}

jobs:
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
      image: ${{ steps.meta.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image tag
        id: meta
        run: |
          TAG=${GITHUB_SHA::7}
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$TAG" >> "$GITHUB_OUTPUT"

      - name: Azure Login (federated)
        uses: azure/login@v2
        with:
          client-id: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          tenant-id: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ACR Login
        run: az acr login -n ${{ secrets.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.image }}
          provenance: false

  deploy:
    name: Deploy to Azure Web App (Container)
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - env: dev
            RG: "rg-optumapp-dev"
            PLAN: "asp-optumapp-dev"
            APP: "optumapp-web-dev"
          - env: uat
            RG: "rg-optumapp-uat"
            PLAN: "asp-optumapp-uat"
            APP: "optumapp-web-uat"
          - env: prod
            RG: "rg-optumapp-prod"
            PLAN: "asp-optumapp-prod"
            APP: "optumapp-web-prod"
    steps:
      - name: Azure Login (federated)
        uses: azure/login@v2
        with:
          client-id: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          tenant-id: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Resource Group
        run: |
          az group create -n "${{ matrix.RG }}" -l "${{ env.LOCATION }}"

      - name: Ensure App Service Plan
        run: |
          if ! az appservice plan show -n "${{ matrix.PLAN }}" -g "${{ matrix.RG }}" >/dev/null 2>&1; then
            az appservice plan create \
              -n "${{ matrix.PLAN }}" \
              -g "${{ matrix.RG }}" \
              -l "${{ env.LOCATION }}" \
              --sku "${{ env.PLAN_SKU }}" \
              --is-linux
          fi

      - name: Ensure Web App
        run: |
          if ! az webapp show -n "${{ matrix.APP }}" -g "${{ matrix.RG }}" >/dev/null 2>&1; then
            az webapp create \
              -n "${{ matrix.APP }}" \
              -g "${{ matrix.RG }}" \
              --plan "${{ matrix.PLAN }}" \
              --runtime "DOTNET|8.0" \
              --deployment-container-image-name "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
          fi

      - name: Configure ACR access for Web App
        run: |
          ACR_LOGIN_SERVER="${{ secrets.ACR_NAME }}.azurecr.io"
          az webapp config container set \
            -g "${{ matrix.RG }}" \
            -n "${{ matrix.APP }}" \
            --docker-custom-image-name "${{ needs.build.outputs.image }}" \
            --docker-registry-server-url "https://${ACR_LOGIN_SERVER}"

          # Optional: enable managed ACR pull (if same subscription; otherwise set admin creds)
          if az acr show -n "${{ secrets.ACR_NAME }}" --query "id" -o tsv >/dev/null 2>&1; then
            ACR_ID=$(az acr show -n "${{ secrets.ACR_NAME }}" --query "id" -o tsv)
            WEBAPP_ID=$(az webapp show -n "${{ matrix.APP }}" -g "${{ matrix.RG }}" --query "id" -o tsv)
            az role assignment create --assignee-object-id $(az webapp identity assign -g "${{ matrix.RG }}" -n "${{ matrix.APP }}" --query principalId -o tsv) \
              --role "AcrPull" --scope "$ACR_ID" >/dev/null 2>&1 || true
          fi

      - name: App Settings (port, always-on)
        run: |
          az webapp config appsettings set -g "${{ matrix.RG }}" -n "${{ matrix.APP }}" --settings \
            WEBSITES_PORT=${{ env.CONTAINER_PORT }} \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITES_CONTAINER_START_TIME_LIMIT=1800 \
            WEBSITE_RUN_FROM_PACKAGE=0

      - name: Restart Web App
        run: az webapp restart -g "${{ matrix.RG }}" -n "${{ matrix.APP }}"